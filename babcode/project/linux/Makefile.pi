# 
# RaspberryPi Babcode Makefile
#

# Application's name
EXE=./libbabcode-linux-pi.a

# File source list: Add your source!
SRC_FILES=array.c bytestream.c conversion.c hashtable.c list.c log.c random.c str.c time.c timer.c utils.c
SRC_FILES+= networkstack-udp.c networkstack-tcp.c networkstack-options.c	
SRC_FILES+= file.c thread.c mutex.c conditionvar.c wait.c
SRC_FILES+= uart.c uart_unix.c networkstack_linux.c crc.c

# Temporary repertory
BUILD_PATH=build/

# Source repertory
SRC_PATH=../../source ../../platform/unix ../../platform/linux

SOURCE_FILES =$(SRC_FILES)

# Library define
# -Dxxx=1
COMPILER_DEFINES=

# Include search path
# -IInclude/
BAB_INCLUDE=

# Path to Gcc compiler:
PATH_TO_GCC=

# Gcc Compiler
GCC_COMPILER=$(PATH_TO_GCC)gcc

# Compiler options
COMPILER_OPTION=-O2 -Wall -march=armv6 -mfpu=vfp -mfloat-abi=hard


# Archiver 
AR=ar
LINKER_OPTION=-rv 

## Compiler/linker macro:

# .c source macro:
COMPILER=$(GCC_COMPILER) $(COMPILER_OPTION) $(COMPILER_DEFINES) $(BAB_INCLUDE) -c

# .o linker macro:
LINKER=$(AR) $(LINKER_OPTION) -o $(EXE) 

# .o search path:
OBJ_FILES =$(patsubst %.c,$(BUILD_PATH)/%.o,$(SOURCE_FILES))

### Make target:

# build application: 
all:  $(OBJ_FILES)
	$(LINKER) $(OBJ_FILES) $(LIB_USE)


# source search path:
vpath %.c  . $(SRC_PATH)

# building .o
$(BUILD_PATH)/%.o : %.c
	$(COMPILER) -o $@ $<
	
clean:
	rm -f $(BUILD_PATH)/*.o $(EXE)
	
##### END OF FILE
